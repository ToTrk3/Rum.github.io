{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/Rum.github.io/2022/03/23/hello-world/"},{"title":"多表查询","text":"表结构 等值连接与非等值连接等值连接 1234SELECT e.employee_id, e.last_name, e.department_id,d.department_id, d.location_idFROM employees e , departments dWHERE e.department_id = d.department_id; 非等值连接 123SELECT e.last_name, e.salary, j.grade_levelFROM employees e, job_grades jWHERE e.salary BETWEEN j.lowest_sal AND j.highest_sal; 自连接1234SELECT CONCAT(worker.last_name ,' works for ', manager.last_name)FROM employees worker, employees managerWHERE worker.manager_id = manager.employee_id ; 内连接与外连接内连接：合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行； 1234567891011121314151617--语法结构SELECT table1.column, table2.column,table3.columnFROM table1JOIN table2 ON table1 和 table2 的连接条件JOIN table3 ON table2 和 table3 的连接条件--例一SELECT e.employee_id, e.last_name, e.department_id,d.department_id, d.location_idFROM employees e JOIN departments dON (e.department_id = d.department_id)--例二SELECT employee_id, city, department_nameFROM employees eJOIN departments dON d.department_id = e.department_idJOIN locations lON d.location_id = l.location_id; 外连接: 两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。连接条件中左边为主表，右表为从表，反之亦然。 1234567891011--左外连接语法结构#实现查询结果是ASELECT 字段列表FROM A表 LEFT JOIN B表ON 关联条件WHERE 等其他子句;--例SELECT e.last_name, e.department_id, d.department_nameFROM employees eLEFT OUTER JOIN departments dON (e.department_id = d.department_id) ; 1234567891011--右外连接语法结构#实现查询结果是BSELECT 字段列表FROM A表 RIGHT JOIN B表ON 关联条件WHERE 等其他子句;--例一SELECT e.last_name, e.department_id, d.department_nameFROM employees eRIGHT OUTER JOIN departments dON (e.department_id = d.department_id) ; 满外连接用 LEFT JOIN UNION RIGHT join UNION的使用合并查询结果 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔 1234--语法结构SELECT column,... FROM table1UNION [ALL]SELECT column,... FROM table2 UNION操作符:UNION 操作符返回两个查询的结果集的并集，去除重复记录。 UNION ALL操作符:UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。 注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率 七种SQL JOINS的实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950--代码实现#中图：内连接 A∩BSELECT employee_id,last_name,department_nameFROM employees e JOIN departments dON e.`department_id` = d.`department_id`;#左上图：左外连接SELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.`department_id` = d.`department_id`;#右上图：右外连接SELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.`department_id` = d.`department_id`;#左中图：A - A∩BSELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.`department_id` = d.`department_id`WHERE d.`department_id` IS NULL#右中图：B-A∩BSELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.`department_id` = d.`department_id`WHERE e.`department_id` IS NULL#左下图：满外连接# 左中图 + 右上图 A∪BSELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.`department_id` = d.`department_id`WHERE d.`department_id` IS NULLUNION ALL #没有去重操作，效率高SELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.`department_id` = d.`department_id`;#右下图#左中图 + 右中图 A ∪B- A∩B 或者 (A - A∩B) ∪ （B - A∩B）SELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.`department_id` = d.`department_id`WHERE d.`department_id` IS NULLUNION ALLSELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.`department_id` = d.`department_id`WHERE e.`department_id` IS NULL USING使用当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的 同名字段 进行等值连接。但是只能配合JOIN一起使用。 12345678--例SELECT employee_id,last_name,department_nameFROM employees e JOIN departments dUSING (department_id);--相同效果SELECT employee_id,last_name,department_nameFROM employees e ,departments dWHERE e.department_id = d.department_id；","link":"/Rum.github.io/2022/03/23/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"}],"tags":[{"name":"Mysql","slug":"Mysql","link":"/Rum.github.io/tags/Mysql/"}],"categories":[]}